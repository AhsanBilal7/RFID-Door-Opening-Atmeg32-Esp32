
GccApplication19.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b01  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000199c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e2  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  8a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
	LCD_Command (0x80);		/* cursor at home position */
  92:	88 bb       	out	0x18, r24	; 24
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <LCD_Command+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <LCD_Command+0x1c>
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	8f e6       	ldi	r24, 0x6F	; 111
  b6:	97 e1       	ldi	r25, 0x17	; 23
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <LCD_Command+0x26>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <LCD_Command+0x2c>
  be:	00 00       	nop
  c0:	08 95       	ret

000000c2 <LCD_Char>:
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Char+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Char+0x1c>
  de:	8b b3       	in	r24, 0x1b	; 27
  e0:	8f 77       	andi	r24, 0x7F	; 127
  e2:	8b bb       	out	0x1b, r24	; 27
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	97 e0       	ldi	r25, 0x07	; 7
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Char+0x26>
  ec:	00 c0       	rjmp	.+0      	; 0xee <LCD_Char+0x2c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <LCD_Init>:
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	8a bb       	out	0x1a, r24	; 26
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	8f e3       	ldi	r24, 0x3F	; 63
  fa:	9c e9       	ldi	r25, 0x9C	; 156
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Init+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_Init+0x10>
 102:	00 00       	nop
 104:	88 e3       	ldi	r24, 0x38	; 56
 106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 10a:	8c e0       	ldi	r24, 0x0C	; 12
 10c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 122:	08 95       	ret

00000124 <LCD_String>:
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	8c 01       	movw	r16, r24
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	03 c0       	rjmp	.+6      	; 0x13a <LCD_String+0x16>
 134:	0e 94 61 00 	call	0xc2	; 0xc2 <LCD_Char>
 138:	21 96       	adiw	r28, 0x01	; 1
 13a:	f8 01       	movw	r30, r16
 13c:	ec 0f       	add	r30, r28
 13e:	fd 1f       	adc	r31, r29
 140:	80 81       	ld	r24, Z
 142:	81 11       	cpse	r24, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <LCD_String+0x10>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <main>:
}


int main()
{
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 150:	8f b5       	in	r24, 0x2f	; 47
 152:	82 6a       	ori	r24, 0xA2	; 162
 154:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 156:	8e b5       	in	r24, 0x2e	; 46
 158:	8b 61       	ori	r24, 0x1B	; 27
 15a:	8e bd       	out	0x2e, r24	; 46

	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 15c:	87 e8       	ldi	r24, 0x87	; 135
 15e:	93 e1       	ldi	r25, 0x13	; 19
 160:	97 bd       	out	0x27, r25	; 39
 162:	86 bd       	out	0x26, r24	; 38
	DDRD = 0XFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	81 bb       	out	0x11, r24	; 17
    DDRC = 0X00;
 168:	14 ba       	out	0x14, r1	; 20
	while(1)
	{
		
	//	OCR1B=425;   //0 degree	    ----------For the checking purpose
		if ((PINC &= 0b00000001))   // check if 0 pin of port C  is high or not
 16a:	83 b3       	in	r24, 0x13	; 19
 16c:	81 70       	andi	r24, 0x01	; 1
 16e:	83 bb       	out	0x13, r24	; 19
 170:	88 23       	and	r24, r24
 172:	09 f1       	breq	.+66     	; 0x1b6 <main+0x66>
		{
			OCR1A=316;  //90 degree
 174:	8c e3       	ldi	r24, 0x3C	; 60
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9b bd       	out	0x2b, r25	; 43
 17a:	8a bd       	out	0x2a, r24	; 42
			PORTD = 0X04;
 17c:	84 e0       	ldi	r24, 0x04	; 4
 17e:	82 bb       	out	0x12, r24	; 18
			LCD_Init();			/* Initialize LCD */
 180:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Init>
			LCD_String("Authorized");	/* write string on 1st line of LCD*/
 184:	85 e8       	ldi	r24, 0x85	; 133
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
			LCD_Command(0xC0);	/* Go to 2nd line*/
 18c:	80 ec       	ldi	r24, 0xC0	; 192
 18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
		    LCD_String("Welcome Ahsan");	/* Write string on 2nd line*/
 192:	80 e6       	ldi	r24, 0x60	; 96
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 ec       	ldi	r24, 0xC3	; 195
 19e:	99 e0       	ldi	r25, 0x09	; 9
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x50>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x5a>
 1aa:	00 00       	nop
			_delay_ms(400);
			 OCR1A=97;   //0 degree
 1ac:	81 e6       	ldi	r24, 0x61	; 97
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9b bd       	out	0x2b, r25	; 43
 1b2:	8a bd       	out	0x2a, r24	; 42
 1b4:	da cf       	rjmp	.-76     	; 0x16a <main+0x1a>
		}
		else if ((PINC &= 0b00000010))
 1b6:	83 b3       	in	r24, 0x13	; 19
 1b8:	82 70       	andi	r24, 0x02	; 2
 1ba:	83 bb       	out	0x13, r24	; 19
 1bc:	88 23       	and	r24, r24
 1be:	09 f1       	breq	.+66     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		{
			OCR1A=316;  //90 degree
 1c0:	8c e3       	ldi	r24, 0x3C	; 60
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	9b bd       	out	0x2b, r25	; 43
 1c6:	8a bd       	out	0x2a, r24	; 42
			PORTD = 0X04;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	82 bb       	out	0x12, r24	; 18
			LCD_Init();			/* Initialize LCD */
 1cc:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Init>
			LCD_String("Authorized");	/* write string on 1st line of LCD*/
 1d0:	85 e8       	ldi	r24, 0x85	; 133
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
			LCD_Command(0xC0);		/* Go to 2nd line*/
 1d8:	80 ec       	ldi	r24, 0xC0	; 192
 1da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			LCD_String("Welcome Fiza");	/* Write string on 2nd line*/
 1de:	8e e6       	ldi	r24, 0x6E	; 110
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ec       	ldi	r24, 0xC3	; 195
 1ea:	99 e0       	ldi	r25, 0x09	; 9
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x9c>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xa6>
 1f6:	00 00       	nop
			_delay_ms(400);
			 OCR1A=97;   //0 degree
 1f8:	81 e6       	ldi	r24, 0x61	; 97
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	9b bd       	out	0x2b, r25	; 43
 1fe:	8a bd       	out	0x2a, r24	; 42
 200:	b4 cf       	rjmp	.-152    	; 0x16a <main+0x1a>
			}
			else
			{
			PORTD = 0X08;
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	82 bb       	out	0x12, r24	; 18
		    OCR1A=97;   //0 degree
 206:	81 e6       	ldi	r24, 0x61	; 97
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	9b bd       	out	0x2b, r25	; 43
 20c:	8a bd       	out	0x2a, r24	; 42
			LCD_Init();			/* Initialize LCD */
 20e:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Init>
			LCD_String("Sorry");	/* write string on 1st line of LCD*/
 212:	8b e7       	ldi	r24, 0x7B	; 123
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
			LCD_Command(0xC0);		/* Go to 2nd line*/
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			LCD_String("Not Authorized");	/* Write string on 2nd line*/
 220:	81 e8       	ldi	r24, 0x81	; 129
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 92 00 	call	0x124	; 0x124 <LCD_String>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	83 ec       	ldi	r24, 0xC3	; 195
 22c:	99 e0       	ldi	r25, 0x09	; 9
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 238:	00 00       	nop
 23a:	97 cf       	rjmp	.-210    	; 0x16a <main+0x1a>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
